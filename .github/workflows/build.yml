name: Build and Test Library

on:
  push:
    branches: [ main ]
    paths: [ 'src/**', 'tests/**', 'Datasync Solution.sln' ]
  pull_request:
    branches: [ main ]
    paths: [ 'src/**', 'tests/**', 'Datasync Solution.sln' ]
  release:
    types: [ published ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CONFIGURATION: 'Release'
  NuGetDirectory: ${{ github.workspace }}/nuget
  SolutionFile: 'Datasync Solution.sln'

permissions:
  pull-requests: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get build version
        run: |
          Import-Module .\tools\GetBuildVersion.psm1
          Write-Host "GitHub Reference = $($env:GITHUB_REF)"
          $version = GetBuildVersion -VersionString $env:GITHUB_REF
          echo "BUILD_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf-8 -Append
          Write-Host "BUILD_VERSION=$version"
        shell: pwsh

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build library
        run: dotnet build --configuration ${{ env.DOTNET_CONFIGURATION }} -p:Version=$BUILD_VERSION --no-restore

      - name: Run tests
        run: dotnet test --nologo --configuration ${{ env.DOTNET_CONFIGURATION }} --no-build --verbosity minimal --logger trx --collect:"XPlat Code Coverage"

      - name: Pack NuGet libraries
        run: dotnet pack --configuration ${{ env.DOTNET_CONFIGURATION }} --no-build --output ${{ env.NuGetDirectory }}

      - name: Upload NuGet packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget-unsigned
          if-no-files-found: error
          path: ${{ env.NuGetDirectory }}/*.nupkg
          retention-days: 7

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          if-no-files-found: error
          path: ${{ github.workspace }}/**/TestResults/*.trx
          retention-days: 7

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2.16.1
        if: always()
        with:
          files: "${{ github.workspace }}/**/*.trx"

      - name: Combine coverage reports
        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.4
        with:
          reports: "**/*.cobertura.xml"
          targetdir: "${{ github.workspace }}" 
          reporttypes: "Cobertura" 
          verbosity: "Info"
          title: "Code Coverage" 
          tag: "${{ github.run_number }}_${{ github.run_id }}" 
          customSettings: "" 
          toolpath: "reportgeneratortool"

      - name: Upload combined coverage XML
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: ${{ github.workspace }}/Cobertura.xml
          retention-days: 7

      - name: Publish code coverage report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with: 
          filename: "Cobertura.xml"
          badge: false
          fail_below_min: false 
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: "10 30"

      - name: Upload combined coverage markdown
        uses: actions/upload-artifact@v4
        with:
          name: coverage-markdown
          path: ${{ github.workspace }}/code-coverage-results.md
          retention-days: 7

      - name: Add coverage PR comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md




